/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Creates new user account with EMPLOYEE role by default. Returns access token in response body with refresh token as HTTP-only cookie. Only admins can change user roles via PATCH /users/:id/role
         */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login with username/email and password
         * @description Returns access token in response body and sets refresh token as HTTP-only cookie
         */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token using refresh token
         * @description Reads refresh token from HTTP-only cookie and returns new access token with updated refresh token cookie
         */
        post: operations["AuthController_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout and invalidate tokens
         * @description Invalidates all user tokens and clears refresh token cookie
         */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get current user information */
        post: operations["AuthController_getProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users with pagination */
        get: operations["UsersController_findAll"];
        put?: never;
        /** Create a new user (Admin only) */
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["UsersController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update current user profile */
        patch: operations["UsersController_updateProfile"];
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by ID */
        get: operations["UsersController_findOne"];
        put?: never;
        post?: never;
        /** Delete user by ID (Admin only) */
        delete: operations["UsersController_remove"];
        options?: never;
        head?: never;
        /** Update user by ID (Admin only) */
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/api/users/me/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change current user password */
        post: operations["UsersController_changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Change user role (Admin only) */
        patch: operations["UsersController_changeRole"];
        trace?: never;
    };
    "/api/users/{id}/toggle-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle user active status (Admin only) */
        post: operations["UsersController_toggleStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all API keys for the current user */
        get: operations["ApiKeysController_findAll"];
        put?: never;
        /** Create a new API key */
        post: operations["ApiKeysController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/api-keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific API key */
        get: operations["ApiKeysController_findOne"];
        put?: never;
        post?: never;
        /** Delete an API key */
        delete: operations["ApiKeysController_remove"];
        options?: never;
        head?: never;
        /** Update an API key */
        patch: operations["ApiKeysController_update"];
        trace?: never;
    };
    "/api/api-keys/{id}/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Revoke an API key */
        post: operations["ApiKeysController_revoke"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all products with pagination */
        get: operations["ProductsController_findAll"];
        put?: never;
        /** Create a new product */
        post: operations["ProductsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product by ID */
        get: operations["ProductsController_findOne"];
        put?: never;
        post?: never;
        /** Delete product by ID */
        delete: operations["ProductsController_remove"];
        options?: never;
        head?: never;
        /** Update product by ID */
        patch: operations["ProductsController_update"];
        trace?: never;
    };
    "/api/v1/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all categories with pagination */
        get: operations["CategoriesController_find_all"];
        put?: never;
        /** Create a new category */
        post: operations["CategoriesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get category by ID */
        get: operations["CategoriesController_find_one"];
        put?: never;
        post?: never;
        /** Delete category by ID */
        delete: operations["CategoriesController_remove"];
        options?: never;
        head?: never;
        /** Update category by ID */
        patch: operations["CategoriesController_update"];
        trace?: never;
    };
    "/api/v1/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all customers with pagination */
        get: operations["CustomersController_find_all"];
        put?: never;
        /** Create a new customer */
        post: operations["CustomersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer by ID */
        get: operations["CustomersController_find_one"];
        put?: never;
        post?: never;
        /** Delete customer by ID */
        delete: operations["CustomersController_remove"];
        options?: never;
        head?: never;
        /** Update customer by ID */
        patch: operations["CustomersController_update"];
        trace?: never;
    };
    "/api/v1/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all orders with pagination */
        get: operations["OrdersController_find_all"];
        put?: never;
        /** Create a new order */
        post: operations["OrdersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get order by ID */
        get: operations["OrdersController_find_one"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update order status or notes */
        patch: operations["OrdersController_update"];
        trace?: never;
    };
    "/api/v1/orders/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel an order */
        post: operations["OrdersController_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/events/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to order events via Server-Sent Events
         * @description Real-time order notifications for tablet display. Requires JWT token as query parameter (?token=your_jwt_token) or API key header.
         */
        get: operations["EventsController_order_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["HealthController_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RegisterDto: {
            /**
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description Username for login
             * @example johndoe
             */
            username: string;
            /**
             * @description User password (min 8 characters)
             * @example SecurePassword123!
             */
            password: string;
        };
        UserInfoDto: {
            /**
             * @description User ID
             * @example 1
             */
            id: number;
            /**
             * @description User email
             * @example user@example.com
             */
            email: string;
            /**
             * @description Username
             * @example johndoe
             */
            username: string;
            /**
             * @description User role
             * @example EMPLOYEE
             * @enum {string}
             */
            role: "ADMIN" | "MANAGER" | "EMPLOYEE" | "CUSTOMER";
            /**
             * @description Whether user is active
             * @example true
             */
            is_active: boolean;
            /**
             * Format: date-time
             * @description User creation date
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description User last update date
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        AuthResponseDto: {
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            access_token: string;
            /**
             * @description Token type
             * @example Bearer
             */
            token_type: string;
            /**
             * @description Token expiration time in seconds
             * @example 3600
             */
            expires_in?: number;
            /**
             * Format: date-time
             * @description Refresh token expiration date (for frontend reference)
             * @example 2024-01-08T00:00:00.000Z
             */
            refresh_token_expires_at: string;
            /** @description User information */
            user: components["schemas"]["UserInfoDto"];
        };
        ConflictErrorResponseDto: {
            /**
             * @description HTTP status code
             * @example 409
             */
            statusCode: number;
            /**
             * @description Conflict error message
             * @example Resource already exists
             */
            message: string;
            /**
             * @description Error details
             * @example Conflict
             */
            error: string;
            /**
             * @description Request timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            timestamp: string;
            /**
             * @description Request path
             * @example /api/v1/users
             */
            path: string;
        };
        ValidationErrorResponseDto: {
            /**
             * @description HTTP status code
             * @example 422
             */
            statusCode: number;
            /**
             * @description Array of validation error messages
             * @example [
             *       "email must be a valid email",
             *       "password is too short"
             *     ]
             */
            message: string[];
            /**
             * @description Error details
             * @example Unprocessable Entity
             */
            error: string;
            /**
             * @description Request timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            timestamp: string;
            /**
             * @description Request path
             * @example /api/v1/products
             */
            path: string;
        };
        InternalServerErrorResponseDto: {
            /**
             * @description HTTP status code
             * @example 500
             */
            statusCode: number;
            /**
             * @description Internal server error message
             * @example Internal server error
             */
            message: string;
            /**
             * @description Error details
             * @example Internal Server Error
             */
            error: string;
            /**
             * @description Request timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            timestamp: string;
            /**
             * @description Request path
             * @example /api/v1/products
             */
            path: string;
        };
        LoginDto: {
            /**
             * @description Username or email address
             * @example johndoe
             */
            username: string;
            /**
             * @description User password
             * @example SecurePassword123!
             */
            password: string;
        };
        UnauthorizedErrorResponseDto: {
            /**
             * @description HTTP status code
             * @example 401
             */
            statusCode: number;
            /**
             * @description Unauthorized access message
             * @example Unauthorized
             */
            message: string;
            /**
             * @description Error details
             * @example Unauthorized
             */
            error: string;
            /**
             * @description Request timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            timestamp: string;
            /**
             * @description Request path
             * @example /api/v1/products
             */
            path: string;
        };
        TokenResponseDto: {
            /**
             * @description New JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            access_token: string;
            /**
             * @description Token type
             * @example Bearer
             */
            token_type: string;
            /**
             * @description Token expiration time in seconds
             * @example 3600
             */
            expires_in?: number;
            /**
             * Format: date-time
             * @description Refresh token expiration date (for frontend reference)
             * @example 2024-01-08T00:00:00.000Z
             */
            refresh_token_expires_at: string;
            /** @description User information */
            user: components["schemas"]["UserInfoDto"];
        };
        MessageResponseDto: {
            /**
             * @description Success or status message
             * @example Operation completed successfully
             */
            message: string;
        };
        User: {
            /**
             * @description User ID
             * @example 1
             */
            id: number;
            /**
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description Username
             * @example johndoe
             */
            username: string;
            /**
             * @description User role
             * @example EMPLOYEE
             * @enum {string}
             */
            role: "ADMIN" | "MANAGER" | "EMPLOYEE" | "CUSTOMER";
            /**
             * @description Whether user is active
             * @example true
             */
            is_active: boolean;
            /**
             * @description Associated customer ID
             * @example 1
             */
            customer_id: Record<string, never> | null;
            /**
             * Format: date-time
             * @description User creation timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description User last update timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        CreateUserDto: {
            /**
             * @description User email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description Username for login
             * @example johndoe
             */
            username: string;
            /**
             * @description User password (min 8 characters)
             * @example SecurePassword123!
             */
            password: string;
            /**
             * @description User role
             * @default EMPLOYEE
             * @example EMPLOYEE
             * @enum {string}
             */
            role: "ADMIN" | "MANAGER" | "EMPLOYEE" | "CUSTOMER";
            /**
             * @description Associated customer ID
             * @example 1
             */
            customer_id?: number;
        };
        ForbiddenErrorResponseDto: {
            /**
             * @description HTTP status code
             * @example 403
             */
            statusCode: number;
            /**
             * @description Forbidden access message
             * @example Forbidden resource
             */
            message: string;
            /**
             * @description Error details
             * @example Forbidden
             */
            error: string;
            /**
             * @description Request timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            timestamp: string;
            /**
             * @description Request path
             * @example /api/v1/admin/users
             */
            path: string;
        };
        PaginationMetaDto: {
            /**
             * @description Current page number
             * @example 1
             */
            page: number;
            /**
             * @description Number of items per page
             * @example 10
             */
            limit: number;
            /**
             * @description Total number of items
             * @example 100
             */
            total: number;
            /**
             * @description Total number of pages
             * @example 10
             */
            total_pages: number;
            /**
             * @description Whether there is a next page
             * @example true
             */
            has_next_page: boolean;
            /**
             * @description Whether there is a previous page
             * @example false
             */
            has_previous_page: boolean;
        };
        PaginatedUsersResponseDto: {
            /** @description Array of users */
            data: components["schemas"]["User"][];
            /** @description Pagination metadata */
            meta: components["schemas"]["PaginationMetaDto"];
        };
        NotFoundErrorResponseDto: {
            /**
             * @description HTTP status code
             * @example 404
             */
            statusCode: number;
            /**
             * @description Resource not found message
             * @example Resource not found
             */
            message: string;
            /**
             * @description Error details
             * @example Not Found
             */
            error: string;
            /**
             * @description Request timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            timestamp: string;
            /**
             * @description Request path
             * @example /api/v1/products/999
             */
            path: string;
        };
        UpdateUserDto: {
            /**
             * @description User email address
             * @example user@example.com
             */
            email?: string;
            /**
             * @description Username for login
             * @example johndoe
             */
            username?: string;
            /**
             * @description User role
             * @default EMPLOYEE
             * @example EMPLOYEE
             * @enum {string}
             */
            role: "ADMIN" | "MANAGER" | "EMPLOYEE" | "CUSTOMER";
            /**
             * @description Associated customer ID
             * @example 1
             */
            customer_id?: number;
        };
        ChangePasswordDto: {
            /**
             * @description Current password
             * @example CurrentPassword123!
             */
            current_password: string;
            /**
             * @description New password (min 8 characters)
             * @example NewPassword123!
             */
            new_password: string;
        };
        ErrorResponseDto: {
            /**
             * @description HTTP status code
             * @example 400
             */
            statusCode: number;
            /**
             * @description Error message
             * @example Bad Request
             */
            message: string;
            /**
             * @description Error details or path
             * @example /api/v1/products
             */
            error?: string;
            /**
             * @description Request timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            timestamp: string;
            /**
             * @description Request path
             * @example /api/v1/products
             */
            path: string;
        };
        ChangeRoleDto: {
            /**
             * @description New role for the user
             * @example MANAGER
             * @enum {string}
             */
            role: "ADMIN" | "MANAGER" | "EMPLOYEE" | "CUSTOMER";
        };
        CreateApiKeyDto: {
            /**
             * @description Name for the API key
             * @example Production API Key
             */
            name: string;
            /**
             * @description Optional expiration date for the API key
             * @example 2025-12-31T23:59:59Z
             */
            expires_at?: string;
        };
        ApiKeyResponseDto: {
            /**
             * @description API key ID
             * @example 1
             */
            id?: number;
            /**
             * @description API key name/description
             * @example My API Key
             */
            name?: string;
            /**
             * @description API key (only shown when created)
             * @example ak_1234567890abcdef
             */
            key?: string;
            /**
             * @description API key prefix for identification
             * @example ak_123...
             */
            key_prefix?: string;
            /**
             * @description Whether the API key is active
             * @example true
             */
            is_active?: boolean;
            /**
             * @description User ID who owns this API key
             * @example 1
             */
            user_id?: number;
            /**
             * Format: date-time
             * @description API key creation date
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description API key last update date
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at?: string;
            /**
             * @description Last time the API key was used
             * @example 2024-01-01T00:00:00.000Z
             */
            last_used_at?: Record<string, never>;
        };
        ApiKeyListResponseDto: {
            /** @description List of API keys */
            data: components["schemas"]["ApiKeyResponseDto"][];
            /**
             * @description Total count of API keys
             * @example 5
             */
            total: number;
        };
        UpdateApiKeyDto: {
            /**
             * @description Name for the API key
             * @example Production API Key
             */
            name?: string;
            /**
             * @description Optional expiration date for the API key
             * @example 2025-12-31T23:59:59Z
             */
            expires_at?: string;
        };
        CreateProductDto: {
            /**
             * @description Product name
             * @example Cappuccino
             */
            name: string;
            /**
             * @description Product description
             * @example Classic Italian coffee with steamed milk foam
             */
            description: string;
            /**
             * @description Product price
             * @example 4.99
             */
            price: number;
            /**
             * @description Whether the product is active
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * @description Volume in milliliters (for beverages)
             * @example 350
             */
            volume_ml?: Record<string, never> | null;
            /**
             * @description Whether the product is promoted
             * @default false
             * @example false
             */
            is_promoted: boolean;
            /**
             * @description Stock Keeping Unit
             * @example COF-CAP-001
             */
            sku: string;
            /**
             * @description Available stock quantity
             * @default 0
             * @example 100
             */
            stock: number;
            /**
             * @description Product image URL
             * @example https://example.com/images/cappuccino.jpg
             */
            image_url?: Record<string, never> | null;
            /**
             * @description Category ID
             * @example 1
             */
            category_id: number;
        };
        Product: {
            /**
             * @description Product ID
             * @example 1
             */
            id: number;
            /**
             * @description Product name
             * @example Cappuccino
             */
            name: string;
            /**
             * @description Product description
             * @example Classic Italian coffee with steamed milk foam
             */
            description: string;
            /**
             * @description Product price
             * @example 4.99
             */
            price: number;
            /**
             * @description Whether the product is active
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * @description Volume in milliliters (for beverages)
             * @example 350
             */
            volume_ml?: Record<string, never> | null;
            /**
             * @description Whether the product is promoted
             * @default false
             * @example false
             */
            is_promoted: boolean;
            /**
             * @description Stock Keeping Unit
             * @example COF-CAP-001
             */
            sku: string;
            /**
             * @description Available stock quantity
             * @default 0
             * @example 100
             */
            stock: number;
            /**
             * @description Product image URL
             * @example https://example.com/images/cappuccino.jpg
             */
            image_url?: Record<string, never> | null;
            /**
             * @description Category ID
             * @example 1
             */
            category_id: number;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        PaginatedProductsResponseDto: {
            /** @description Array of products */
            data: components["schemas"]["Product"][];
            /** @description Pagination metadata */
            meta: components["schemas"]["PaginationMetaDto"];
        };
        UpdateProductDto: {
            /**
             * @description Product name
             * @example Cappuccino
             */
            name?: string;
            /**
             * @description Product description
             * @example Classic Italian coffee with steamed milk foam
             */
            description?: string;
            /**
             * @description Product price
             * @example 4.99
             */
            price?: number;
            /**
             * @description Whether the product is active
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * @description Volume in milliliters (for beverages)
             * @example 350
             */
            volume_ml?: Record<string, never> | null;
            /**
             * @description Whether the product is promoted
             * @default false
             * @example false
             */
            is_promoted: boolean;
            /**
             * @description Stock Keeping Unit
             * @example COF-CAP-001
             */
            sku?: string;
            /**
             * @description Available stock quantity
             * @default 0
             * @example 100
             */
            stock: number;
            /**
             * @description Product image URL
             * @example https://example.com/images/cappuccino.jpg
             */
            image_url?: Record<string, never> | null;
            /**
             * @description Category ID
             * @example 1
             */
            category_id?: number;
        };
        CreateCategoryDto: {
            /**
             * @description Category name
             * @example Hot Beverages
             */
            name: string;
            /**
             * @description Category description
             * @example Coffee, tea, and other hot drinks
             */
            description: Record<string, never> | null;
            /**
             * @description URL-friendly slug
             * @example hot-beverages
             */
            slug: string;
            /**
             * @description Whether the category is active
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * @description Display order for sorting
             * @default 0
             * @example 1
             */
            display_order: number;
        };
        Category: {
            /**
             * @description Category ID
             * @example 1
             */
            id: number;
            /**
             * @description Category name
             * @example Hot Beverages
             */
            name: string;
            /**
             * @description Category description
             * @example Coffee, tea, and other hot drinks
             */
            description: Record<string, never> | null;
            /**
             * @description URL-friendly slug
             * @example hot-beverages
             */
            slug: string;
            /**
             * @description Whether the category is active
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * @description Display order for sorting
             * @default 0
             * @example 1
             */
            display_order: number;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        PaginatedCategoriesResponseDto: {
            /** @description Array of categories */
            data: components["schemas"]["Category"][];
            /** @description Pagination metadata */
            meta: components["schemas"]["PaginationMetaDto"];
        };
        UpdateCategoryDto: {
            /**
             * @description Category name
             * @example Hot Beverages
             */
            name?: string;
            /**
             * @description Category description
             * @example Coffee, tea, and other hot drinks
             */
            description?: Record<string, never> | null;
            /**
             * @description URL-friendly slug
             * @example hot-beverages
             */
            slug?: string;
            /**
             * @description Whether the category is active
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * @description Display order for sorting
             * @default 0
             * @example 1
             */
            display_order: number;
        };
        CreateCustomerDto: {
            /**
             * @description Customer email address
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description Customer first name
             * @example John
             */
            first_name: string;
            /**
             * @description Customer last name
             * @example Doe
             */
            last_name: string;
            /**
             * @description Customer phone number
             * @example +1234567890
             */
            phone?: Record<string, never> | null;
        };
        Customer: {
            /**
             * @description Customer ID
             * @example 1
             */
            id: number;
            /**
             * @description Customer email address
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description Customer first name
             * @example John
             */
            first_name: string;
            /**
             * @description Customer last name
             * @example Doe
             */
            last_name: string;
            /**
             * @description Customer phone number
             * @example +1234567890
             */
            phone?: Record<string, never> | null;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        PaginatedCustomersResponseDto: {
            /** @description Array of customers */
            data: components["schemas"]["Customer"][];
            /** @description Pagination metadata */
            meta: components["schemas"]["PaginationMetaDto"];
        };
        UpdateCustomerDto: {
            /**
             * @description Customer email address
             * @example john.doe@example.com
             */
            email?: string;
            /**
             * @description Customer first name
             * @example John
             */
            first_name?: string;
            /**
             * @description Customer last name
             * @example Doe
             */
            last_name?: string;
            /**
             * @description Customer phone number
             * @example +1234567890
             */
            phone?: Record<string, never> | null;
        };
        CreateOrderItemDto: {
            /**
             * @description Product ID
             * @example 1
             */
            product_id: number;
            /**
             * @description Quantity to order
             * @example 2
             */
            quantity: number;
        };
        CreateOrderDto: {
            /**
             * @description Customer ID (optional for walk-in customers)
             * @example 1
             */
            customer_id?: Record<string, never> | null;
            /**
             * @description Order notes
             * @example Extra hot, no foam
             */
            notes?: Record<string, never> | null;
            /**
             * @description Order items
             * @example [
             *       {
             *         "product_id": 1,
             *         "quantity": 2
             *       },
             *       {
             *         "product_id": 3,
             *         "quantity": 1
             *       }
             *     ]
             */
            items: components["schemas"]["CreateOrderItemDto"][];
        };
        Order: {
            /**
             * @description Order ID
             * @example 1
             */
            id: number;
            /**
             * @description Unique order number
             * @example ORD-2024-001
             */
            order_number: string;
            /**
             * @description Order status
             * @example PENDING
             * @enum {string}
             */
            status: "PENDING" | "CONFIRMED" | "PREPARING" | "READY" | "COMPLETED" | "CANCELLED";
            /**
             * @description Total order amount
             * @example 24.99
             */
            total_amount: number;
            /**
             * @description Order notes
             * @example No sugar in the cappuccino please
             */
            notes?: Record<string, never> | null;
            /**
             * @description Customer ID
             * @example 1
             */
            customer_id?: Record<string, never> | null;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        PaginatedOrdersResponseDto: {
            /** @description Array of orders */
            data: components["schemas"]["Order"][];
            /** @description Pagination metadata */
            meta: components["schemas"]["PaginationMetaDto"];
        };
        UpdateOrderDto: {
            /**
             * @description Order status
             * @example CONFIRMED
             * @enum {string}
             */
            status: "PENDING" | "CONFIRMED" | "PREPARING" | "READY" | "COMPLETED" | "CANCELLED";
            /**
             * @description Order notes
             * @example Customer requests extra napkins
             */
            notes: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description User successfully registered. Refresh token is set as HTTP-only cookie. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponseDto"];
                };
            };
            /** @description User with this email or username already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Successfully logged in. Refresh token is set as HTTP-only cookie. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponseDto"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AuthController_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token successfully refreshed. New refresh token is set as HTTP-only cookie. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponseDto"];
                };
            };
            /** @description Invalid refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AuthController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User information retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_findAll: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns paginated list of users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUsersResponseDto"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description User with this email or username already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns current user information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description User with this email or username already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns user information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Cannot delete user with associated data */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description User with this email or username already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordDto"];
            };
        };
        responses: {
            /** @description Password changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Current password is incorrect */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_changeRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangeRoleDto"];
            };
        };
        responses: {
            /** @description User role changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_toggleStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User status toggled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ApiKeysController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of API keys */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyListResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ApiKeysController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiKeyDto"];
            };
        };
        responses: {
            /** @description API key created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ApiKeysController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API key details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ApiKeysController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API key deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ApiKeysController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateApiKeyDto"];
            };
        };
        responses: {
            /** @description API key updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ApiKeysController_revoke: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API key revoked successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description API key not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ProductsController_findAll: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns paginated list of products */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProductsResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ProductsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductDto"];
            };
        };
        responses: {
            /** @description Product created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Product with this SKU already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ProductsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns product by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ProductsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Cannot delete product with existing orders */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    ProductsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductDto"];
            };
        };
        responses: {
            /** @description Returns updated product */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Product not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Product with this SKU already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CategoriesController_find_all: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns paginated list of categories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCategoriesResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CategoriesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDto"];
            };
        };
        responses: {
            /** @description Category created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Category with this name or slug already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CategoriesController_find_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns category with products */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CategoriesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Cannot delete category with products */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CategoriesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDto"];
            };
        };
        responses: {
            /** @description Returns updated category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Category with this name or slug already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CustomersController_find_all: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns paginated list of customers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCustomersResponseDto"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CustomersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCustomerDto"];
            };
        };
        responses: {
            /** @description Customer created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Customer with this email already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CustomersController_find_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns customer with recent orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Customer not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CustomersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Customer not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Cannot delete customer with orders */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    CustomersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCustomerDto"];
            };
        };
        responses: {
            /** @description Returns updated customer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Customer not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Customer with this email already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    OrdersController_find_all: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
                /** @description Filter by order status */
                status?: "PENDING" | "CONFIRMED" | "PREPARING" | "READY" | "COMPLETED" | "CANCELLED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns paginated list of orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOrdersResponseDto"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    OrdersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderDto"];
            };
        };
        responses: {
            /** @description Order created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Invalid product or insufficient stock */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    OrdersController_find_one: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns order with details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    OrdersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderDto"];
            };
        };
        responses: {
            /** @description Returns updated order */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Invalid status transition */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    OrdersController_cancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Cannot cancel order in current status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedErrorResponseDto"];
                };
            };
            /** @description Insufficient permissions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenErrorResponseDto"];
                };
            };
            /** @description Order not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundErrorResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    EventsController_order_events: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event stream established */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": string;
                };
            };
            /** @description Unauthorized - API key or JWT token missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthController_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example 2024-01-01T00:00:00.000Z */
                        timestamp?: string;
                        /** @example 123.456 */
                        uptime?: number;
                        database?: {
                            /** @example connected */
                            status?: string;
                        };
                    };
                };
            };
        };
    };
}
